/* eslint-disable no-template-curly-in-string */
export const LANG_KEYWORDS = [
  'break',
  'defer',
  'import',
  'struct',
  'case',
  'else',
  'interface',
  'switch',
  'const',
  'for',
  'map',
  'type',
  'continue',
  'func',
  'range',
  'default',
  'global',
  'if',
  'return',
  'make',
]

export const LANG_TYPES = [
  'bool',
  'string',
  'error',
  'map',
  'int',
  'int8',
  'int16',
  'int32',
  'int64',
  'i8',
  'i16',
  'i32',
  'i64',
  'rune',
  'uint',
  'uint8',
  'uint16',
  'uint32',
  'uint64',
  'u8',
  'u16',
  'u32',
  'u64',
  'uintptr',
  'byte',
  'float32',
  'float64',
  'f32',
  'f64',
  'complex64',
  'complex128',
  'c64',
  'c128',
]

export const LANG_BOOL = ['true', 'false']

export const LANG_SNIPPETS = [
  {
    label: 'im',
    insertText: 'import "${1:pkg}"',
    detail: 'Snippet for import statement',
  },
  {
    label: 'ims',
    insertText: 'import (\n\t${1:pkg}\n)',
    detail: 'Snippet for a import block',
  },
  {
    label: 'co',
    insertText: 'const ${1:name} = ${2:value}',
    detail: 'Snippet for a constant',
  },
  {
    label: 'cos',
    insertText: 'const (\n\t${1:name} = ${2:value}\n)',
    detail: 'Snippet for a constant block',
  },
  {
    label: 'tyf',
    insertText: 'type ${1:name} func($3) $4',
    detail: 'Snippet for a type function declaration',
  },
  {
    label: 'tyi',
    insertText: 'type ${1:name} interface {\n\t$0\n}',
    detail: 'Snippet for a type interface',
  },
  {
    label: 'tys',
    insertText: 'type ${1:name} struct {\n\t$0\n}',
    detail: 'Snippet for a struct declaration',
  },
  {
    label: 'if',
    insertText: 'if ${1:cond} {\n\t$0\n}',
    detail: 'Snippet for if statement',
  },
  {
    label: 'ife',
    insertText: 'if ${1:cond} {\n\t$0\n} else {\n\t$0\n}',
    detail: 'Snippet for if else statement',
  },
  {
    label: 'iferr',
    insertText: 'if ${1:cond} != nil {\n\t$0\n}',
    detail: 'Snippet for if != nil statement',
  },
  {
    label: 'for',
    insertText: 'for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}',
    detail: 'Snippet for for statement',
  },
  {
    label: 'forr',
    insertText: 'for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}',
    detail: 'Snippet for for range statement',
  },
  {
    label: 'sw',
    insertText: 'switch ${1:expr} {\n\t$0\n}',
    detail: 'Snippet for switch statement',
  },
  {
    label: 'swc',
    insertText: 'switch ${1:expr} {\ncase ${2:cond}:\n\t$0\n}',
    detail: 'Snippet for switch case statement',
  },
  {
    label: 'swd',
    insertText: 'switch ${1:expr} {\ndefault:\n\t$0\n}',
    detail: 'Snippet for switch default statement',
  },
  {
    label: 'swcd',
    insertText: 'switch ${1:expr} {\ncase ${2:cond1}:\n\t$3\ndefault ${4:cond2}:\n\t$0\n}',
    detail: 'Snippet for switch default statement',
  },
  {
    label: 'df',
    insertText: 'defer ${1:func}()',
    detail: 'Snippet for defer statement',
  },
  {
    label: 'rt',
    insertText: 'return ${1:value}',
    detail: 'Snippet for return statement',
  },
  {
    label: 'br',
    insertText: 'break',
    detail: 'Snippet for break statement',
  },
  {
    label: 'cn',
    insertText: 'continue',
    detail: 'Snippet for continue statement',
  },
  {
    label: 'f',
    insertText: 'func ${1:name}($2) $3 {\n\t$0\n}',
    detail: 'Snippet for function declaration',
  },
]
